
supported_audio_input_formats = [
    '8svx_exp',
    '8svx_fib',
    'aac',
    'aac_fixed',
    'aac_latm',
    'ac3',
    'ac3_fixed',
    'adpcm_4xm',
    'adpcm_adx',
    'adpcm_afc',
    'adpcm_aica',
    'adpcm_ct',
    'adpcm_dtk',
    'adpcm_ea',
    'adpcm_ea_maxis_xa',
    'adpcm_ea_r1',
    'adpcm_ea_r2',
    'adpcm_ea_r3',
    'adpcm_ea_xas',
    'g722',
    'g726',
    'g726le',
    'adpcm_ima_amv',
    'adpcm_ima_apc',
    'adpcm_ima_dat4',
    'adpcm_ima_dk3',
    'adpcm_ima_dk4',
    'adpcm_ima_ea_eacs',
    'adpcm_ima_ea_sead',
    'adpcm_ima_iss',
    'adpcm_ima_oki',
    'adpcm_ima_qt',
    'adpcm_ima_rad',
    'adpcm_ima_smjpeg',
    'adpcm_ima_wav',
    'adpcm_ima_ws',
    'adpcm_ms',
    'adpcm_mtaf',
    'adpcm_psx',
    'adpcm_sbpro_2',
    'adpcm_sbpro_3',
    'adpcm_sbpro_4',
    'adpcm_swf',
    'adpcm_thp',
    'adpcm_thp_le',
    'adpcm_vima',
    'adpcm_xa',
    'adpcm_yamaha',
    'alac',
    'amrnb',
    'amrwb',
    'ape',
    'atrac1',
    'atrac3',
    'atrac3plus',
    'on2avc',
    'binkaudio_dct',
    'binkaudio_rdft',
    'bmv_audio',
    'comfortnoise',
    'cook',
    'dsd_lsbf',
    'dsd_lsbf_planar',
    'dsd_msbf',
    'dsd_msbf_planar',
    'dsicinaudio',
    'dss_sp',
    'dst',
    'dca',
    'dvaudio',
    'eac3',
    'evrc',
    'flac',
    'g723_1',
    'g729',
    'gsm',
    'gsm_ms',
    'iac',
    'imc',
    'interplay_dpcm',
    'interplayacm',
    'mace3',
    'mace6',
    'metasound',
    'mlp',
    'mp1',
    'mp1float',
    'mp2',
    'mp2float',
    'mp3',
    'mp3float',
    'mp3adu',
    'mp3adufloat',
    'mp3on4',
    'mp3on4float',
    'als',
    'mpc7',
    'mpc8',
    'nellymoser',
    'opus',
    'paf_audio',
    'pcm_alaw',
    'pcm_bluray',
    'pcm_dvd',
    'pcm_f32be',
    'pcm_f32le',
    'pcm_f64be',
    'pcm_f64le',
    'pcm_lxf',
    'pcm_mulaw',
    'pcm_s16be',
    'pcm_s16be_planar',
    'pcm_s16le',
    'pcm_s16le_planar',
    'pcm_s24be',
    'pcm_s24daud',
    'pcm_s24le',
    'pcm_s24le_planar',
    'pcm_s32be',
    'pcm_s32le',
    'pcm_s32le_planar',
    'pcm_s64be',
    'pcm_s64le',
    'pcm_s8',
    'pcm_s8_planar',
    'pcm_u16be',
    'pcm_u16le',
    'pcm_u24be',
    'pcm_u24le',
    'pcm_u32be',
    'pcm_u32le',
    'pcm_u8',
    'pcm_zork',
    'qcelp',
    'qdm2',
    'real_144',
    'real_288',
    'ralf',
    'roq_dpcm',
    's302m',
    'sdx2_dpcm',
    'shorten',
    'sipr',
    'smackaud',
    'sol_dpcm',
    'sonic',
    'tak',
    'truehd',
    'truespeech',
    'tta',
    'twinvq',
    'vmdaudio',
    'vorbis',
    'wavesynth',
    'wavpack',
    'ws_snd1',
    'wmalossless',
    'wmapro',
    'wmav1',
    'wmav2',
    'wmavoice',
    'xan_dpcm',
    'xma1',
    'xma2',
]
def verify_audio_input_format(input_format):
    if input_format.lower() in supported_audio_input_formats:
        return True
    return False

supported_audio_output_formats = [
   'aac',
   'ac3',
   'ac3_fixed',
   'adpcm_adx',
   'g722',
   'g726',
   'adpcm_ima_qt',
   'adpcm_ima_wav',
   'adpcm_ms',
   'adpcm_swf',
   'adpcm_yamaha',
   'alac',
   'comfortnoise',
   'dca',
   'eac3',
   'flac',
   'g723_1',
   'mlp',
   'mp2',
   'mp2fixed',
   'mp3',
   'nellymoser',
   'pcm_alaw',
   'pcm_f32be',
   'pcm_f32le',
   'pcm_f64be',
   'pcm_f64le',
   'pcm_mulaw',
   'pcm_s16be',
   'pcm_s16be_planar',
   'pcm_s16le',
   'pcm_s16le_planar',
   'pcm_s24be',
   'pcm_s24daud',
   'pcm_s24le',
   'pcm_s24le_planar',
   'pcm_s32be',
   'pcm_s32le',
   'pcm_s32le_planar',
   'pcm_s64be',
   'pcm_s64le',
   'pcm_s8',
   'pcm_s8_planar',
   'pcm_u16be',
   'pcm_u16le',
   'pcm_u24be',
   'pcm_u24le',
   'pcm_u32be',
   'pcm_u32le',
   'pcm_u8',
   'real_144',
   'roq_dpcm',
   's302m',
   'sonic',
   'sonicls',
   'truehd',
   'tta',
   'vorbis',
   'wavpack',
   'wmav1',
   'wmav2',
]

class ConvertAudioException(Exception):
	pass

def verify_audio_output_format(output_format):
    if output_format.lower() in supported_audio_output_formats:
        return True
    return False

def convert_audio_command(ffmpeg_binary, input_filename, output_format,
	              output_filename):

   convert_audio_template = ('{ffmpeg_binary} -i {input_filename} '
                             '-f {output_format} {output_filename} -y')

   convert_audio_command = convert_audio_template.format(
       ffmpeg_binary=ffmpeg_binary, input_filename=input_filename,
       output_format=output_format, output_filename=output_filename,
   )

   return convert_audio_command
